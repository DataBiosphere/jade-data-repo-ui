name: e2e
on: push
jobs:
  build:
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Check out the repository
        uses: actions/checkout@v1
      - name: Install Helm v3 on runner
        uses: azure/setup-helm@v1
        with:
          version: "v3.1.1"
        id: install
      - name: Install helm plugins and repos for charts
        run: |
          helm plugin install https://github.com/thomastaylor312/helm-namespace
          helm repo add datarepo-helm https://broadinstitute.github.io/datarepo-helm
          helm repo update
      - name: "Install Vault"
        uses: broadinstitute/setup-vault@v1
        with:
          version: "1.3"
        # the vault token and private key are used for connected and integration tests
      - name: "Get Vault token"
        # pull in GitHub secrets as environment variables
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GOOGLE_SA_CERT: ${{ secrets.GOOGLE_SA_CERT }}
        run: |
          export VAULT_TOKEN=$(curl \
            --request POST \
            --data '{"role_id":"'"${ROLE_ID}"'","secret_id":"'"${SECRET_ID}"'"}' \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          vault read -format=json secret/dsde/datarepo/dev/sa-key.json | \
            jq .data > $GOOGLE_APPLICATION_CREDENTIALS
          jq -r .private_key $GOOGLE_APPLICATION_CREDENTIALS > $GOOGLE_SA_CERT
          chmod 600 $GOOGLE_SA_CERT
      - name: "Configure Google Cloud SDK"
        env:
          INTEGRATION_ZONE: us-central1
          INTEGRATION_PROJECT: broad-jade-integration
          CLUSTER_NAME: integration-master
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          # authenticate against google cloud with the vault token json
          gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS

          # configure integration prerequisites
          gcloud config set compute/zone ${INTEGRATION_ZONE}
          gcloud config set project ${INTEGRATION_PROJECT}

          gcloud auth configure-docker
          sudo apt-get install kubectl
          # get the current authorized list of IPs from kubernetes and add the
          # GitHub Action runner IP to the list as unknown IPs cannot otherwise
          # interact with kubernetes
          CUR_IPS=$(gcloud container clusters describe ${CLUSTER_NAME} --format json | \
            jq -r '[.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock]')
          RUNNER_IP=$(curl 'https://api.ipify.org/?format=text' | xargs printf '[ "%s/32" ]')
          NEW_IPS=$(printf '%s\n' $CUR_IPS $RUNNER_IP | jq -s -r 'add | unique | join(",")')
          echo "::set-env name=RUNNER_IP::${RUNNER_IP}"

          gcloud container clusters update ${CLUSTER_NAME} \
            --enable-master-authorized-networks \
            --master-authorized-networks ${NEW_IPS}

          # necessary to be able to push containers into kubernetes
          gcloud container clusters get-credentials ${CLUSTER_NAME}
          # export CLUSTER_NAME so it can be used during cleanup
          echo "::set-env name=CLUSTER_NAME::${CLUSTER_NAME}"
      - name: "Check for an availble namespace to deploy API to and set state lock"
        uses: broadinstitute/datarepo-actions@0.1.0
        with:
          actions_subcommand: "k8_checknamespace"
          k8_namespaces: "integration-6,integration-7"
      - name: Build new ui container
        env:
          DEV_PROJECT: broad-jade-dev
        run: |
          GCR_TAG=$(git rev-parse --short HEAD)
          echo "::set-env name=GCR_TAG::${GCR_TAG}"
          npm ci
          npm run-script build
      # Build the Docker image
      - name: Build
        run: |
          printf "debug list\n $(ls -al)"
          docker build -t gcr.io/broad-jade-dev/jade-data-repo-ui:${GCR_TAG} .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push gcr.io/broad-jade-dev/jade-data-repo-ui:${GCR_TAG}
      - name: "Deploy to cluster with Helm"
        uses: broadinstitute/datarepo-actions@0.1.0
        with:
          actions_subcommand: "helmdeploy"
          helm_secret_chart_version: "0.0.4"
          helm_datarepo_chart_version: "0.0.8"
      - name: wait for status checks
        run: |
          kubectl get deployments -n integration integration-jade-datarepo-ui -o json | jq '.status.unavailableReplicas'
      - name: set cypresss env
        run: |
          CYPRESS_GOOGLE_TOKEN=$(gcloud auth print-access-token)
          echo ::add-mask::${CYPRESS_GOOGLE_TOKEN}
          echo ::set-env name=CYPRESS_GOOGLE_TOKEN::${CYPRESS_GOOGLE_TOKEN}
      - name: Cypress run
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        run: |
          npx cypress run --record
      - name: "Clean state lock from used Namespace on API deploy"
        if: always()
        uses: broadinstitute/datarepo-actions@0.1.0
        with:
          actions_subcommand: "k8_checknamespace_clean"
      - name: "Clean whitelisted Runner IP"
        if: always()
        uses: broadinstitute/datarepo-actions@0.1.0
        with:
          actions_subcommand: "gcp_whitelist_clean"
